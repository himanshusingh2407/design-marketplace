{"version":3,"sources":["DesignCard.js","Utils.js","Constants.js","Reducer.js","App.js","customHooks.js","reportWebVitals.js","index.js"],"names":["DesignCards","imgData","images","map","image","index","name","thumbnail","imageUrl","id","split","getImageUrl","className","alt","imgReducer","state","action","type","concat","fetching","pageReducer","page","App","data","dispatch","useReducer","pager","pagerDispatch","imgDispatch","bottomBoundaryRef","useRef","useEffect","fetch","then","json","page_results","catch","e","imgSelector","items","imgObserver","useCallback","node","intObs","IntersectionObserver","entries","forEach","en","intersectionRatio","currentImg","target","newImgSrc","dataset","src","console","error","unobserve","observe","imagesRef","current","document","querySelectorAll","img","useLazyLoading","scrollRef","scrollObserver","useInfiniteScroll","ref","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.2cc3c2f5.chunk.js","sourcesContent":["import { getImageUrl } from './Utils';\n\nexport const DesignCards = (imgData) => (imgData.images.map((image, index) => {\n    const { name, thumbnail, id } = image;\n    const imageUrl = getImageUrl(id, thumbnail);\n    return (\n      <div key={index} className=\"card\">\n        <div className=\"card-body \">\n          <img\n            alt={name}\n            data-src={imageUrl}\n            className=\"card-img-top\"\n          />\n        </div>\n        <div className=\"card-footer\">\n          <div className=\"card-name\">{name}</div>\n        </div>\n      </div>\n    );\n  }));","import {imageBaseUrl} from './Constants';\n\nexport const getImageUrl = (id, thumbnail) => {\n    return `${imageBaseUrl}${(id?.split(':')[0])}/p/f/m/${thumbnail}`;\n}","export const imageBaseUrl = 'https://garden.spoonflower.com/c/';\nexport const designApi = 'https://pythias.spoonflower.com/search/v1/designs';\nexport const pageSize = 25;","export const imgReducer = (state, action) => {\n    switch (action.type) {\n      case 'STACK_IMAGES':\n        return { ...state, images: state.images.concat(action.images) }\n      case 'FETCHING_IMAGES':\n        return { ...state, fetching: action.fetching }\n      default:\n        return state;\n    }\n  }\n\nexport const pageReducer = (state, action) => {\n    switch (action.type) {\n      case 'ADVANCE_PAGE':\n        return { ...state, page: state.page + 1 }\n      default:\n        return state;\n    }\n  }","import React, { useReducer, useRef } from 'react';\nimport { useFetch, useInfiniteScroll, useLazyLoading } from './customHooks';\nimport { DesignCards } from './DesignCard';\nimport { imgReducer, pageReducer } from './Reducer';\nimport './App.css';\n\nfunction App() {\n  const [pager, pagerDispatch] = useReducer(pageReducer, { page: 0 });\n  const [imgData, imgDispatch] = useReducer(imgReducer, { images: [], fetching: true, });\n\n  let bottomBoundaryRef = useRef(null);\n  useFetch(pager, imgDispatch);\n  useLazyLoading('.card-img-top', imgData.images);\n  useInfiniteScroll(bottomBoundaryRef, pagerDispatch);\n\n  \n  return (\n    <>\n      <h1 className=\"page-title\">Design Marketplace</h1>\n      <div id='images'>\n        <div className=\"row\">\n          {DesignCards(imgData)}\n        </div>\n      </div>\n\n      {imgData.fetching && (\n        <div className=\"loader\">Loading images...</div>\n      )}\n      <div id='page-bottom-boundary' ref={bottomBoundaryRef}></div>\n    </>\n  );\n}\n\nexport default App;\n","import { useEffect, useCallback, useRef } from 'react';\nimport { pageSize, designApi } from './Constants';\n\n// make API calls and pass the returned data via dispatch\nexport const useFetch = (data, dispatch) => {\n  useEffect(() => {\n    dispatch({ type: 'FETCHING_IMAGES', fetching: true })\n    fetch(`${designApi}?page_offset=${data.page*pageSize}&page_size=${pageSize}`)\n      .then(data => data.json())\n      .then(images => {\n        dispatch({ type: 'STACK_IMAGES', images: images.page_results })\n        dispatch({ type: 'FETCHING_IMAGES', fetching: false })\n      })\n      .catch(e => {\n        // handle error\n        dispatch({ type: 'FETCHING_IMAGES', fetching: false })\n        return e;\n      })\n  }, [dispatch, data.page])\n}\n\n// infinite scrolling with intersection observer\nexport const useInfiniteScroll = (scrollRef, dispatch) => {\n  const scrollObserver = useCallback(\n    node => {\n      new IntersectionObserver(entries => {\n        entries.forEach(en => {\n          if (en.intersectionRatio > 0) {\n            dispatch({ type: 'ADVANCE_PAGE' });\n          }\n        });\n      }).observe(node);\n    },\n    [dispatch]\n  );\n\n  useEffect(() => {\n    if (scrollRef.current) {\n      scrollObserver(scrollRef.current);\n    }\n  }, [scrollObserver, scrollRef]);\n}\n\n// lazy load images with intersection observer\nexport const useLazyLoading = (imgSelector, items) => {\n  const imgObserver = useCallback(node => {\n    const intObs = new IntersectionObserver(entries => {\n      entries.forEach(en => {\n        if (en.intersectionRatio > 0) {\n          const currentImg = en.target;\n          const newImgSrc = currentImg.dataset.src;\n\n          // only swap out the image source if the new url exists\n          if (!newImgSrc) {\n            console.error('Image source is invalid');\n          } else {\n            currentImg.src = newImgSrc;\n          }\n          intObs.unobserve(node);\n        }\n      });\n    })\n    intObs.observe(node);\n  }, []);\n\n  const imagesRef = useRef(null);\n\n  useEffect(() => {\n    imagesRef.current = document.querySelectorAll(imgSelector);\n\n    if (imagesRef.current) {\n      imagesRef.current.forEach(img => imgObserver(img));\n    }\n  }, [imgObserver, imagesRef, imgSelector, items])\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}